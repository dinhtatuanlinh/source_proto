// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.3
// source: content_service.proto

package source_proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	ContentService_RPCContentHealthCheck_FullMethodName     = "/pb.ContentService/RPCContentHealthCheck"
	ContentService_RPCCreatePost_FullMethodName             = "/pb.ContentService/RPCCreatePost"
	ContentService_RPCGetPost_FullMethodName                = "/pb.ContentService/RPCGetPost"
	ContentService_RPCGetPosts_FullMethodName               = "/pb.ContentService/RPCGetPosts"
	ContentService_RPCUpdatePost_FullMethodName             = "/pb.ContentService/RPCUpdatePost"
	ContentService_RPCCreateCategory_FullMethodName         = "/pb.ContentService/RPCCreateCategory"
	ContentService_RPCGetCategory_FullMethodName            = "/pb.ContentService/RPCGetCategory"
	ContentService_RPCGetCategories_FullMethodName          = "/pb.ContentService/RPCGetCategories"
	ContentService_RPCUpdateCategory_FullMethodName         = "/pb.ContentService/RPCUpdateCategory"
	ContentService_RPCCreateTag_FullMethodName              = "/pb.ContentService/RPCCreateTag"
	ContentService_RPCGetTag_FullMethodName                 = "/pb.ContentService/RPCGetTag"
	ContentService_RPCGetTags_FullMethodName                = "/pb.ContentService/RPCGetTags"
	ContentService_RPCUpdateTag_FullMethodName              = "/pb.ContentService/RPCUpdateTag"
	ContentService_RPCAddPostToCategory_FullMethodName      = "/pb.ContentService/RPCAddPostToCategory"
	ContentService_RPCRemovePostFromCategory_FullMethodName = "/pb.ContentService/RPCRemovePostFromCategory"
	ContentService_RPCAddPostToTag_FullMethodName           = "/pb.ContentService/RPCAddPostToTag"
	ContentService_RPCRemovePostFromTag_FullMethodName      = "/pb.ContentService/RPCRemovePostFromTag"
	ContentService_RPCUploadImage_FullMethodName            = "/pb.ContentService/RPCUploadImage"
	ContentService_RPCGetImage_FullMethodName               = "/pb.ContentService/RPCGetImage"
	ContentService_RPCGetImages_FullMethodName              = "/pb.ContentService/RPCGetImages"
	ContentService_RPCDeleteImage_FullMethodName            = "/pb.ContentService/RPCDeleteImage"
	ContentService_RPCUpdateImage_FullMethodName            = "/pb.ContentService/RPCUpdateImage"
	ContentService_RPCUploadFile_FullMethodName             = "/pb.ContentService/RPCUploadFile"
	ContentService_RPCGetFile_FullMethodName                = "/pb.ContentService/RPCGetFile"
	ContentService_RPCGetFiles_FullMethodName               = "/pb.ContentService/RPCGetFiles"
	ContentService_RPCDeleteFile_FullMethodName             = "/pb.ContentService/RPCDeleteFile"
	ContentService_RPCUpdateFile_FullMethodName             = "/pb.ContentService/RPCUpdateFile"
	ContentService_RPCAddBanner_FullMethodName              = "/pb.ContentService/RPCAddBanner"
	ContentService_RPCGetBanners_FullMethodName             = "/pb.ContentService/RPCGetBanners"
	ContentService_RPCUpdateBanner_FullMethodName           = "/pb.ContentService/RPCUpdateBanner"
	ContentService_RPCDeleteBanner_FullMethodName           = "/pb.ContentService/RPCDeleteBanner"
)

// ContentServiceClient is the client API for ContentService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ContentServiceClient interface {
	// op000000
	RPCContentHealthCheck(ctx context.Context, in *ContentHealthCheckRequest, opts ...grpc.CallOption) (*ContentHealthCheckResponse, error)
	// CT000001
	RPCCreatePost(ctx context.Context, in *CreatePostRequest, opts ...grpc.CallOption) (*CreatePostResponse, error)
	// CT000002
	RPCGetPost(ctx context.Context, in *GetPostRequest, opts ...grpc.CallOption) (*GetPostResponse, error)
	// CT000003
	RPCGetPosts(ctx context.Context, in *GetPostsRequest, opts ...grpc.CallOption) (*GetPostsResponse, error)
	// CT000004
	RPCUpdatePost(ctx context.Context, in *UpdatePostRequest, opts ...grpc.CallOption) (*UpdatePostResponse, error)
	// CT000005
	RPCCreateCategory(ctx context.Context, in *CreateCategoryRequest, opts ...grpc.CallOption) (*CreateCategoryResponse, error)
	// CT000006
	RPCGetCategory(ctx context.Context, in *GetCategoryRequest, opts ...grpc.CallOption) (*GetCategoryResponse, error)
	// CT000007
	RPCGetCategories(ctx context.Context, in *GetCategoriesRequest, opts ...grpc.CallOption) (*GetCategoriesResponse, error)
	// CT000008
	RPCUpdateCategory(ctx context.Context, in *UpdateCategoryRequest, opts ...grpc.CallOption) (*UpdateCategoryResponse, error)
	// CT000009
	RPCCreateTag(ctx context.Context, in *CreateTagRequest, opts ...grpc.CallOption) (*CreateTagResponse, error)
	// CT000010
	RPCGetTag(ctx context.Context, in *GetTagRequest, opts ...grpc.CallOption) (*GetTagResponse, error)
	// CT000011
	RPCGetTags(ctx context.Context, in *GetTagsRequest, opts ...grpc.CallOption) (*GetTagsResponse, error)
	// CT000012
	RPCUpdateTag(ctx context.Context, in *UpdateTagRequest, opts ...grpc.CallOption) (*UpdateTagResponse, error)
	// CT000013
	RPCAddPostToCategory(ctx context.Context, in *AddPostToCategoryRequest, opts ...grpc.CallOption) (*AddPostToCategoryResponse, error)
	// CT000014
	RPCRemovePostFromCategory(ctx context.Context, in *RemovePostFromCategoryRequest, opts ...grpc.CallOption) (*RemovePostFromCategoryResponse, error)
	// CT000015
	RPCAddPostToTag(ctx context.Context, in *AddPostToTagRequest, opts ...grpc.CallOption) (*AddPostToTagResponse, error)
	// CT000016
	RPCRemovePostFromTag(ctx context.Context, in *RemovePostFromTagRequest, opts ...grpc.CallOption) (*RemovePostFromTagResponse, error)
	// CT000017
	RPCUploadImage(ctx context.Context, in *UploadImageRequest, opts ...grpc.CallOption) (*UploadImageResponse, error)
	// CT000018
	RPCGetImage(ctx context.Context, in *GetImageRequest, opts ...grpc.CallOption) (*GetImageResponse, error)
	// CT000019
	RPCGetImages(ctx context.Context, in *GetImagesRequest, opts ...grpc.CallOption) (*GetImagesResponse, error)
	// CT000020
	RPCDeleteImage(ctx context.Context, in *DeleteImageRequest, opts ...grpc.CallOption) (*DeleteImageResponse, error)
	// CT000021
	RPCUpdateImage(ctx context.Context, in *UpdateImageRequest, opts ...grpc.CallOption) (*UpdateImageResponse, error)
	// CT000022
	RPCUploadFile(ctx context.Context, in *UploadFileRequest, opts ...grpc.CallOption) (*UploadFileResponse, error)
	// CT000023
	RPCGetFile(ctx context.Context, in *GetFileRequest, opts ...grpc.CallOption) (*GetFileResponse, error)
	// CT000024
	RPCGetFiles(ctx context.Context, in *GetFilesRequest, opts ...grpc.CallOption) (*GetFilesResponse, error)
	// CT000025
	RPCDeleteFile(ctx context.Context, in *DeleteFileRequest, opts ...grpc.CallOption) (*DeleteFileResponse, error)
	// CT000026
	RPCUpdateFile(ctx context.Context, in *UpdateFileRequest, opts ...grpc.CallOption) (*UpdateFileResponse, error)
	// CT000027
	RPCAddBanner(ctx context.Context, in *AddBannerRequest, opts ...grpc.CallOption) (*AddBannerResponse, error)
	// CT0000028
	RPCGetBanners(ctx context.Context, in *GetBannersRequest, opts ...grpc.CallOption) (*GetBannersResponse, error)
	// CT000029
	RPCUpdateBanner(ctx context.Context, in *UpdateBannerRequest, opts ...grpc.CallOption) (*UpdateBannerResponse, error)
	// CT000030
	RPCDeleteBanner(ctx context.Context, in *DeleteBannerRequest, opts ...grpc.CallOption) (*DeleteBannerResponse, error)
}

type contentServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewContentServiceClient(cc grpc.ClientConnInterface) ContentServiceClient {
	return &contentServiceClient{cc}
}

func (c *contentServiceClient) RPCContentHealthCheck(ctx context.Context, in *ContentHealthCheckRequest, opts ...grpc.CallOption) (*ContentHealthCheckResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ContentHealthCheckResponse)
	err := c.cc.Invoke(ctx, ContentService_RPCContentHealthCheck_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *contentServiceClient) RPCCreatePost(ctx context.Context, in *CreatePostRequest, opts ...grpc.CallOption) (*CreatePostResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreatePostResponse)
	err := c.cc.Invoke(ctx, ContentService_RPCCreatePost_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *contentServiceClient) RPCGetPost(ctx context.Context, in *GetPostRequest, opts ...grpc.CallOption) (*GetPostResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetPostResponse)
	err := c.cc.Invoke(ctx, ContentService_RPCGetPost_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *contentServiceClient) RPCGetPosts(ctx context.Context, in *GetPostsRequest, opts ...grpc.CallOption) (*GetPostsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetPostsResponse)
	err := c.cc.Invoke(ctx, ContentService_RPCGetPosts_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *contentServiceClient) RPCUpdatePost(ctx context.Context, in *UpdatePostRequest, opts ...grpc.CallOption) (*UpdatePostResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdatePostResponse)
	err := c.cc.Invoke(ctx, ContentService_RPCUpdatePost_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *contentServiceClient) RPCCreateCategory(ctx context.Context, in *CreateCategoryRequest, opts ...grpc.CallOption) (*CreateCategoryResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateCategoryResponse)
	err := c.cc.Invoke(ctx, ContentService_RPCCreateCategory_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *contentServiceClient) RPCGetCategory(ctx context.Context, in *GetCategoryRequest, opts ...grpc.CallOption) (*GetCategoryResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetCategoryResponse)
	err := c.cc.Invoke(ctx, ContentService_RPCGetCategory_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *contentServiceClient) RPCGetCategories(ctx context.Context, in *GetCategoriesRequest, opts ...grpc.CallOption) (*GetCategoriesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetCategoriesResponse)
	err := c.cc.Invoke(ctx, ContentService_RPCGetCategories_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *contentServiceClient) RPCUpdateCategory(ctx context.Context, in *UpdateCategoryRequest, opts ...grpc.CallOption) (*UpdateCategoryResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateCategoryResponse)
	err := c.cc.Invoke(ctx, ContentService_RPCUpdateCategory_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *contentServiceClient) RPCCreateTag(ctx context.Context, in *CreateTagRequest, opts ...grpc.CallOption) (*CreateTagResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateTagResponse)
	err := c.cc.Invoke(ctx, ContentService_RPCCreateTag_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *contentServiceClient) RPCGetTag(ctx context.Context, in *GetTagRequest, opts ...grpc.CallOption) (*GetTagResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetTagResponse)
	err := c.cc.Invoke(ctx, ContentService_RPCGetTag_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *contentServiceClient) RPCGetTags(ctx context.Context, in *GetTagsRequest, opts ...grpc.CallOption) (*GetTagsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetTagsResponse)
	err := c.cc.Invoke(ctx, ContentService_RPCGetTags_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *contentServiceClient) RPCUpdateTag(ctx context.Context, in *UpdateTagRequest, opts ...grpc.CallOption) (*UpdateTagResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateTagResponse)
	err := c.cc.Invoke(ctx, ContentService_RPCUpdateTag_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *contentServiceClient) RPCAddPostToCategory(ctx context.Context, in *AddPostToCategoryRequest, opts ...grpc.CallOption) (*AddPostToCategoryResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AddPostToCategoryResponse)
	err := c.cc.Invoke(ctx, ContentService_RPCAddPostToCategory_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *contentServiceClient) RPCRemovePostFromCategory(ctx context.Context, in *RemovePostFromCategoryRequest, opts ...grpc.CallOption) (*RemovePostFromCategoryResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RemovePostFromCategoryResponse)
	err := c.cc.Invoke(ctx, ContentService_RPCRemovePostFromCategory_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *contentServiceClient) RPCAddPostToTag(ctx context.Context, in *AddPostToTagRequest, opts ...grpc.CallOption) (*AddPostToTagResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AddPostToTagResponse)
	err := c.cc.Invoke(ctx, ContentService_RPCAddPostToTag_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *contentServiceClient) RPCRemovePostFromTag(ctx context.Context, in *RemovePostFromTagRequest, opts ...grpc.CallOption) (*RemovePostFromTagResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RemovePostFromTagResponse)
	err := c.cc.Invoke(ctx, ContentService_RPCRemovePostFromTag_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *contentServiceClient) RPCUploadImage(ctx context.Context, in *UploadImageRequest, opts ...grpc.CallOption) (*UploadImageResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UploadImageResponse)
	err := c.cc.Invoke(ctx, ContentService_RPCUploadImage_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *contentServiceClient) RPCGetImage(ctx context.Context, in *GetImageRequest, opts ...grpc.CallOption) (*GetImageResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetImageResponse)
	err := c.cc.Invoke(ctx, ContentService_RPCGetImage_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *contentServiceClient) RPCGetImages(ctx context.Context, in *GetImagesRequest, opts ...grpc.CallOption) (*GetImagesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetImagesResponse)
	err := c.cc.Invoke(ctx, ContentService_RPCGetImages_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *contentServiceClient) RPCDeleteImage(ctx context.Context, in *DeleteImageRequest, opts ...grpc.CallOption) (*DeleteImageResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteImageResponse)
	err := c.cc.Invoke(ctx, ContentService_RPCDeleteImage_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *contentServiceClient) RPCUpdateImage(ctx context.Context, in *UpdateImageRequest, opts ...grpc.CallOption) (*UpdateImageResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateImageResponse)
	err := c.cc.Invoke(ctx, ContentService_RPCUpdateImage_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *contentServiceClient) RPCUploadFile(ctx context.Context, in *UploadFileRequest, opts ...grpc.CallOption) (*UploadFileResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UploadFileResponse)
	err := c.cc.Invoke(ctx, ContentService_RPCUploadFile_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *contentServiceClient) RPCGetFile(ctx context.Context, in *GetFileRequest, opts ...grpc.CallOption) (*GetFileResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetFileResponse)
	err := c.cc.Invoke(ctx, ContentService_RPCGetFile_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *contentServiceClient) RPCGetFiles(ctx context.Context, in *GetFilesRequest, opts ...grpc.CallOption) (*GetFilesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetFilesResponse)
	err := c.cc.Invoke(ctx, ContentService_RPCGetFiles_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *contentServiceClient) RPCDeleteFile(ctx context.Context, in *DeleteFileRequest, opts ...grpc.CallOption) (*DeleteFileResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteFileResponse)
	err := c.cc.Invoke(ctx, ContentService_RPCDeleteFile_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *contentServiceClient) RPCUpdateFile(ctx context.Context, in *UpdateFileRequest, opts ...grpc.CallOption) (*UpdateFileResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateFileResponse)
	err := c.cc.Invoke(ctx, ContentService_RPCUpdateFile_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *contentServiceClient) RPCAddBanner(ctx context.Context, in *AddBannerRequest, opts ...grpc.CallOption) (*AddBannerResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AddBannerResponse)
	err := c.cc.Invoke(ctx, ContentService_RPCAddBanner_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *contentServiceClient) RPCGetBanners(ctx context.Context, in *GetBannersRequest, opts ...grpc.CallOption) (*GetBannersResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetBannersResponse)
	err := c.cc.Invoke(ctx, ContentService_RPCGetBanners_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *contentServiceClient) RPCUpdateBanner(ctx context.Context, in *UpdateBannerRequest, opts ...grpc.CallOption) (*UpdateBannerResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateBannerResponse)
	err := c.cc.Invoke(ctx, ContentService_RPCUpdateBanner_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *contentServiceClient) RPCDeleteBanner(ctx context.Context, in *DeleteBannerRequest, opts ...grpc.CallOption) (*DeleteBannerResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteBannerResponse)
	err := c.cc.Invoke(ctx, ContentService_RPCDeleteBanner_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ContentServiceServer is the server API for ContentService service.
// All implementations must embed UnimplementedContentServiceServer
// for forward compatibility.
type ContentServiceServer interface {
	// op000000
	RPCContentHealthCheck(context.Context, *ContentHealthCheckRequest) (*ContentHealthCheckResponse, error)
	// CT000001
	RPCCreatePost(context.Context, *CreatePostRequest) (*CreatePostResponse, error)
	// CT000002
	RPCGetPost(context.Context, *GetPostRequest) (*GetPostResponse, error)
	// CT000003
	RPCGetPosts(context.Context, *GetPostsRequest) (*GetPostsResponse, error)
	// CT000004
	RPCUpdatePost(context.Context, *UpdatePostRequest) (*UpdatePostResponse, error)
	// CT000005
	RPCCreateCategory(context.Context, *CreateCategoryRequest) (*CreateCategoryResponse, error)
	// CT000006
	RPCGetCategory(context.Context, *GetCategoryRequest) (*GetCategoryResponse, error)
	// CT000007
	RPCGetCategories(context.Context, *GetCategoriesRequest) (*GetCategoriesResponse, error)
	// CT000008
	RPCUpdateCategory(context.Context, *UpdateCategoryRequest) (*UpdateCategoryResponse, error)
	// CT000009
	RPCCreateTag(context.Context, *CreateTagRequest) (*CreateTagResponse, error)
	// CT000010
	RPCGetTag(context.Context, *GetTagRequest) (*GetTagResponse, error)
	// CT000011
	RPCGetTags(context.Context, *GetTagsRequest) (*GetTagsResponse, error)
	// CT000012
	RPCUpdateTag(context.Context, *UpdateTagRequest) (*UpdateTagResponse, error)
	// CT000013
	RPCAddPostToCategory(context.Context, *AddPostToCategoryRequest) (*AddPostToCategoryResponse, error)
	// CT000014
	RPCRemovePostFromCategory(context.Context, *RemovePostFromCategoryRequest) (*RemovePostFromCategoryResponse, error)
	// CT000015
	RPCAddPostToTag(context.Context, *AddPostToTagRequest) (*AddPostToTagResponse, error)
	// CT000016
	RPCRemovePostFromTag(context.Context, *RemovePostFromTagRequest) (*RemovePostFromTagResponse, error)
	// CT000017
	RPCUploadImage(context.Context, *UploadImageRequest) (*UploadImageResponse, error)
	// CT000018
	RPCGetImage(context.Context, *GetImageRequest) (*GetImageResponse, error)
	// CT000019
	RPCGetImages(context.Context, *GetImagesRequest) (*GetImagesResponse, error)
	// CT000020
	RPCDeleteImage(context.Context, *DeleteImageRequest) (*DeleteImageResponse, error)
	// CT000021
	RPCUpdateImage(context.Context, *UpdateImageRequest) (*UpdateImageResponse, error)
	// CT000022
	RPCUploadFile(context.Context, *UploadFileRequest) (*UploadFileResponse, error)
	// CT000023
	RPCGetFile(context.Context, *GetFileRequest) (*GetFileResponse, error)
	// CT000024
	RPCGetFiles(context.Context, *GetFilesRequest) (*GetFilesResponse, error)
	// CT000025
	RPCDeleteFile(context.Context, *DeleteFileRequest) (*DeleteFileResponse, error)
	// CT000026
	RPCUpdateFile(context.Context, *UpdateFileRequest) (*UpdateFileResponse, error)
	// CT000027
	RPCAddBanner(context.Context, *AddBannerRequest) (*AddBannerResponse, error)
	// CT0000028
	RPCGetBanners(context.Context, *GetBannersRequest) (*GetBannersResponse, error)
	// CT000029
	RPCUpdateBanner(context.Context, *UpdateBannerRequest) (*UpdateBannerResponse, error)
	// CT000030
	RPCDeleteBanner(context.Context, *DeleteBannerRequest) (*DeleteBannerResponse, error)
	mustEmbedUnimplementedContentServiceServer()
}

// UnimplementedContentServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedContentServiceServer struct{}

func (UnimplementedContentServiceServer) RPCContentHealthCheck(context.Context, *ContentHealthCheckRequest) (*ContentHealthCheckResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RPCContentHealthCheck not implemented")
}
func (UnimplementedContentServiceServer) RPCCreatePost(context.Context, *CreatePostRequest) (*CreatePostResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RPCCreatePost not implemented")
}
func (UnimplementedContentServiceServer) RPCGetPost(context.Context, *GetPostRequest) (*GetPostResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RPCGetPost not implemented")
}
func (UnimplementedContentServiceServer) RPCGetPosts(context.Context, *GetPostsRequest) (*GetPostsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RPCGetPosts not implemented")
}
func (UnimplementedContentServiceServer) RPCUpdatePost(context.Context, *UpdatePostRequest) (*UpdatePostResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RPCUpdatePost not implemented")
}
func (UnimplementedContentServiceServer) RPCCreateCategory(context.Context, *CreateCategoryRequest) (*CreateCategoryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RPCCreateCategory not implemented")
}
func (UnimplementedContentServiceServer) RPCGetCategory(context.Context, *GetCategoryRequest) (*GetCategoryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RPCGetCategory not implemented")
}
func (UnimplementedContentServiceServer) RPCGetCategories(context.Context, *GetCategoriesRequest) (*GetCategoriesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RPCGetCategories not implemented")
}
func (UnimplementedContentServiceServer) RPCUpdateCategory(context.Context, *UpdateCategoryRequest) (*UpdateCategoryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RPCUpdateCategory not implemented")
}
func (UnimplementedContentServiceServer) RPCCreateTag(context.Context, *CreateTagRequest) (*CreateTagResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RPCCreateTag not implemented")
}
func (UnimplementedContentServiceServer) RPCGetTag(context.Context, *GetTagRequest) (*GetTagResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RPCGetTag not implemented")
}
func (UnimplementedContentServiceServer) RPCGetTags(context.Context, *GetTagsRequest) (*GetTagsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RPCGetTags not implemented")
}
func (UnimplementedContentServiceServer) RPCUpdateTag(context.Context, *UpdateTagRequest) (*UpdateTagResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RPCUpdateTag not implemented")
}
func (UnimplementedContentServiceServer) RPCAddPostToCategory(context.Context, *AddPostToCategoryRequest) (*AddPostToCategoryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RPCAddPostToCategory not implemented")
}
func (UnimplementedContentServiceServer) RPCRemovePostFromCategory(context.Context, *RemovePostFromCategoryRequest) (*RemovePostFromCategoryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RPCRemovePostFromCategory not implemented")
}
func (UnimplementedContentServiceServer) RPCAddPostToTag(context.Context, *AddPostToTagRequest) (*AddPostToTagResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RPCAddPostToTag not implemented")
}
func (UnimplementedContentServiceServer) RPCRemovePostFromTag(context.Context, *RemovePostFromTagRequest) (*RemovePostFromTagResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RPCRemovePostFromTag not implemented")
}
func (UnimplementedContentServiceServer) RPCUploadImage(context.Context, *UploadImageRequest) (*UploadImageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RPCUploadImage not implemented")
}
func (UnimplementedContentServiceServer) RPCGetImage(context.Context, *GetImageRequest) (*GetImageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RPCGetImage not implemented")
}
func (UnimplementedContentServiceServer) RPCGetImages(context.Context, *GetImagesRequest) (*GetImagesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RPCGetImages not implemented")
}
func (UnimplementedContentServiceServer) RPCDeleteImage(context.Context, *DeleteImageRequest) (*DeleteImageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RPCDeleteImage not implemented")
}
func (UnimplementedContentServiceServer) RPCUpdateImage(context.Context, *UpdateImageRequest) (*UpdateImageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RPCUpdateImage not implemented")
}
func (UnimplementedContentServiceServer) RPCUploadFile(context.Context, *UploadFileRequest) (*UploadFileResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RPCUploadFile not implemented")
}
func (UnimplementedContentServiceServer) RPCGetFile(context.Context, *GetFileRequest) (*GetFileResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RPCGetFile not implemented")
}
func (UnimplementedContentServiceServer) RPCGetFiles(context.Context, *GetFilesRequest) (*GetFilesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RPCGetFiles not implemented")
}
func (UnimplementedContentServiceServer) RPCDeleteFile(context.Context, *DeleteFileRequest) (*DeleteFileResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RPCDeleteFile not implemented")
}
func (UnimplementedContentServiceServer) RPCUpdateFile(context.Context, *UpdateFileRequest) (*UpdateFileResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RPCUpdateFile not implemented")
}
func (UnimplementedContentServiceServer) RPCAddBanner(context.Context, *AddBannerRequest) (*AddBannerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RPCAddBanner not implemented")
}
func (UnimplementedContentServiceServer) RPCGetBanners(context.Context, *GetBannersRequest) (*GetBannersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RPCGetBanners not implemented")
}
func (UnimplementedContentServiceServer) RPCUpdateBanner(context.Context, *UpdateBannerRequest) (*UpdateBannerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RPCUpdateBanner not implemented")
}
func (UnimplementedContentServiceServer) RPCDeleteBanner(context.Context, *DeleteBannerRequest) (*DeleteBannerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RPCDeleteBanner not implemented")
}
func (UnimplementedContentServiceServer) mustEmbedUnimplementedContentServiceServer() {}
func (UnimplementedContentServiceServer) testEmbeddedByValue()                        {}

// UnsafeContentServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ContentServiceServer will
// result in compilation errors.
type UnsafeContentServiceServer interface {
	mustEmbedUnimplementedContentServiceServer()
}

func RegisterContentServiceServer(s grpc.ServiceRegistrar, srv ContentServiceServer) {
	// If the following call pancis, it indicates UnimplementedContentServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&ContentService_ServiceDesc, srv)
}

func _ContentService_RPCContentHealthCheck_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ContentHealthCheckRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContentServiceServer).RPCContentHealthCheck(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ContentService_RPCContentHealthCheck_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContentServiceServer).RPCContentHealthCheck(ctx, req.(*ContentHealthCheckRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ContentService_RPCCreatePost_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreatePostRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContentServiceServer).RPCCreatePost(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ContentService_RPCCreatePost_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContentServiceServer).RPCCreatePost(ctx, req.(*CreatePostRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ContentService_RPCGetPost_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPostRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContentServiceServer).RPCGetPost(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ContentService_RPCGetPost_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContentServiceServer).RPCGetPost(ctx, req.(*GetPostRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ContentService_RPCGetPosts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPostsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContentServiceServer).RPCGetPosts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ContentService_RPCGetPosts_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContentServiceServer).RPCGetPosts(ctx, req.(*GetPostsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ContentService_RPCUpdatePost_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdatePostRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContentServiceServer).RPCUpdatePost(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ContentService_RPCUpdatePost_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContentServiceServer).RPCUpdatePost(ctx, req.(*UpdatePostRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ContentService_RPCCreateCategory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateCategoryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContentServiceServer).RPCCreateCategory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ContentService_RPCCreateCategory_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContentServiceServer).RPCCreateCategory(ctx, req.(*CreateCategoryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ContentService_RPCGetCategory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCategoryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContentServiceServer).RPCGetCategory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ContentService_RPCGetCategory_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContentServiceServer).RPCGetCategory(ctx, req.(*GetCategoryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ContentService_RPCGetCategories_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCategoriesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContentServiceServer).RPCGetCategories(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ContentService_RPCGetCategories_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContentServiceServer).RPCGetCategories(ctx, req.(*GetCategoriesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ContentService_RPCUpdateCategory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateCategoryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContentServiceServer).RPCUpdateCategory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ContentService_RPCUpdateCategory_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContentServiceServer).RPCUpdateCategory(ctx, req.(*UpdateCategoryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ContentService_RPCCreateTag_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateTagRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContentServiceServer).RPCCreateTag(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ContentService_RPCCreateTag_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContentServiceServer).RPCCreateTag(ctx, req.(*CreateTagRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ContentService_RPCGetTag_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTagRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContentServiceServer).RPCGetTag(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ContentService_RPCGetTag_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContentServiceServer).RPCGetTag(ctx, req.(*GetTagRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ContentService_RPCGetTags_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTagsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContentServiceServer).RPCGetTags(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ContentService_RPCGetTags_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContentServiceServer).RPCGetTags(ctx, req.(*GetTagsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ContentService_RPCUpdateTag_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateTagRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContentServiceServer).RPCUpdateTag(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ContentService_RPCUpdateTag_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContentServiceServer).RPCUpdateTag(ctx, req.(*UpdateTagRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ContentService_RPCAddPostToCategory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddPostToCategoryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContentServiceServer).RPCAddPostToCategory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ContentService_RPCAddPostToCategory_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContentServiceServer).RPCAddPostToCategory(ctx, req.(*AddPostToCategoryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ContentService_RPCRemovePostFromCategory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemovePostFromCategoryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContentServiceServer).RPCRemovePostFromCategory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ContentService_RPCRemovePostFromCategory_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContentServiceServer).RPCRemovePostFromCategory(ctx, req.(*RemovePostFromCategoryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ContentService_RPCAddPostToTag_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddPostToTagRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContentServiceServer).RPCAddPostToTag(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ContentService_RPCAddPostToTag_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContentServiceServer).RPCAddPostToTag(ctx, req.(*AddPostToTagRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ContentService_RPCRemovePostFromTag_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemovePostFromTagRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContentServiceServer).RPCRemovePostFromTag(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ContentService_RPCRemovePostFromTag_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContentServiceServer).RPCRemovePostFromTag(ctx, req.(*RemovePostFromTagRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ContentService_RPCUploadImage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UploadImageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContentServiceServer).RPCUploadImage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ContentService_RPCUploadImage_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContentServiceServer).RPCUploadImage(ctx, req.(*UploadImageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ContentService_RPCGetImage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetImageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContentServiceServer).RPCGetImage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ContentService_RPCGetImage_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContentServiceServer).RPCGetImage(ctx, req.(*GetImageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ContentService_RPCGetImages_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetImagesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContentServiceServer).RPCGetImages(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ContentService_RPCGetImages_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContentServiceServer).RPCGetImages(ctx, req.(*GetImagesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ContentService_RPCDeleteImage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteImageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContentServiceServer).RPCDeleteImage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ContentService_RPCDeleteImage_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContentServiceServer).RPCDeleteImage(ctx, req.(*DeleteImageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ContentService_RPCUpdateImage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateImageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContentServiceServer).RPCUpdateImage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ContentService_RPCUpdateImage_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContentServiceServer).RPCUpdateImage(ctx, req.(*UpdateImageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ContentService_RPCUploadFile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UploadFileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContentServiceServer).RPCUploadFile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ContentService_RPCUploadFile_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContentServiceServer).RPCUploadFile(ctx, req.(*UploadFileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ContentService_RPCGetFile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetFileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContentServiceServer).RPCGetFile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ContentService_RPCGetFile_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContentServiceServer).RPCGetFile(ctx, req.(*GetFileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ContentService_RPCGetFiles_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetFilesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContentServiceServer).RPCGetFiles(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ContentService_RPCGetFiles_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContentServiceServer).RPCGetFiles(ctx, req.(*GetFilesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ContentService_RPCDeleteFile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteFileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContentServiceServer).RPCDeleteFile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ContentService_RPCDeleteFile_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContentServiceServer).RPCDeleteFile(ctx, req.(*DeleteFileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ContentService_RPCUpdateFile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateFileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContentServiceServer).RPCUpdateFile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ContentService_RPCUpdateFile_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContentServiceServer).RPCUpdateFile(ctx, req.(*UpdateFileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ContentService_RPCAddBanner_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddBannerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContentServiceServer).RPCAddBanner(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ContentService_RPCAddBanner_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContentServiceServer).RPCAddBanner(ctx, req.(*AddBannerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ContentService_RPCGetBanners_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBannersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContentServiceServer).RPCGetBanners(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ContentService_RPCGetBanners_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContentServiceServer).RPCGetBanners(ctx, req.(*GetBannersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ContentService_RPCUpdateBanner_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateBannerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContentServiceServer).RPCUpdateBanner(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ContentService_RPCUpdateBanner_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContentServiceServer).RPCUpdateBanner(ctx, req.(*UpdateBannerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ContentService_RPCDeleteBanner_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteBannerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContentServiceServer).RPCDeleteBanner(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ContentService_RPCDeleteBanner_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContentServiceServer).RPCDeleteBanner(ctx, req.(*DeleteBannerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ContentService_ServiceDesc is the grpc.ServiceDesc for ContentService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ContentService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pb.ContentService",
	HandlerType: (*ContentServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "RPCContentHealthCheck",
			Handler:    _ContentService_RPCContentHealthCheck_Handler,
		},
		{
			MethodName: "RPCCreatePost",
			Handler:    _ContentService_RPCCreatePost_Handler,
		},
		{
			MethodName: "RPCGetPost",
			Handler:    _ContentService_RPCGetPost_Handler,
		},
		{
			MethodName: "RPCGetPosts",
			Handler:    _ContentService_RPCGetPosts_Handler,
		},
		{
			MethodName: "RPCUpdatePost",
			Handler:    _ContentService_RPCUpdatePost_Handler,
		},
		{
			MethodName: "RPCCreateCategory",
			Handler:    _ContentService_RPCCreateCategory_Handler,
		},
		{
			MethodName: "RPCGetCategory",
			Handler:    _ContentService_RPCGetCategory_Handler,
		},
		{
			MethodName: "RPCGetCategories",
			Handler:    _ContentService_RPCGetCategories_Handler,
		},
		{
			MethodName: "RPCUpdateCategory",
			Handler:    _ContentService_RPCUpdateCategory_Handler,
		},
		{
			MethodName: "RPCCreateTag",
			Handler:    _ContentService_RPCCreateTag_Handler,
		},
		{
			MethodName: "RPCGetTag",
			Handler:    _ContentService_RPCGetTag_Handler,
		},
		{
			MethodName: "RPCGetTags",
			Handler:    _ContentService_RPCGetTags_Handler,
		},
		{
			MethodName: "RPCUpdateTag",
			Handler:    _ContentService_RPCUpdateTag_Handler,
		},
		{
			MethodName: "RPCAddPostToCategory",
			Handler:    _ContentService_RPCAddPostToCategory_Handler,
		},
		{
			MethodName: "RPCRemovePostFromCategory",
			Handler:    _ContentService_RPCRemovePostFromCategory_Handler,
		},
		{
			MethodName: "RPCAddPostToTag",
			Handler:    _ContentService_RPCAddPostToTag_Handler,
		},
		{
			MethodName: "RPCRemovePostFromTag",
			Handler:    _ContentService_RPCRemovePostFromTag_Handler,
		},
		{
			MethodName: "RPCUploadImage",
			Handler:    _ContentService_RPCUploadImage_Handler,
		},
		{
			MethodName: "RPCGetImage",
			Handler:    _ContentService_RPCGetImage_Handler,
		},
		{
			MethodName: "RPCGetImages",
			Handler:    _ContentService_RPCGetImages_Handler,
		},
		{
			MethodName: "RPCDeleteImage",
			Handler:    _ContentService_RPCDeleteImage_Handler,
		},
		{
			MethodName: "RPCUpdateImage",
			Handler:    _ContentService_RPCUpdateImage_Handler,
		},
		{
			MethodName: "RPCUploadFile",
			Handler:    _ContentService_RPCUploadFile_Handler,
		},
		{
			MethodName: "RPCGetFile",
			Handler:    _ContentService_RPCGetFile_Handler,
		},
		{
			MethodName: "RPCGetFiles",
			Handler:    _ContentService_RPCGetFiles_Handler,
		},
		{
			MethodName: "RPCDeleteFile",
			Handler:    _ContentService_RPCDeleteFile_Handler,
		},
		{
			MethodName: "RPCUpdateFile",
			Handler:    _ContentService_RPCUpdateFile_Handler,
		},
		{
			MethodName: "RPCAddBanner",
			Handler:    _ContentService_RPCAddBanner_Handler,
		},
		{
			MethodName: "RPCGetBanners",
			Handler:    _ContentService_RPCGetBanners_Handler,
		},
		{
			MethodName: "RPCUpdateBanner",
			Handler:    _ContentService_RPCUpdateBanner_Handler,
		},
		{
			MethodName: "RPCDeleteBanner",
			Handler:    _ContentService_RPCDeleteBanner_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "content_service.proto",
}
