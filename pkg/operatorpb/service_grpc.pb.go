// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.3
// source: service.proto

package source_proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	Source_RPCCreateAdmin_FullMethodName                = "/pb.Source/RPCCreateAdmin"
	Source_RPCCreateOperator_FullMethodName             = "/pb.Source/RPCCreateOperator"
	Source_RPCVerifyOperator_FullMethodName             = "/pb.Source/RPCVerifyOperator"
	Source_RPCGetOperator_FullMethodName                = "/pb.Source/RPCGetOperator"
	Source_RPCGetOperatorList_FullMethodName            = "/pb.Source/RPCGetOperatorList"
	Source_RPCUpdateOperator_FullMethodName             = "/pb.Source/RPCUpdateOperator"
	Source_RPCResendOperatorVerification_FullMethodName = "/pb.Source/RPCResendOperatorVerification"
)

// SourceClient is the client API for Source service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SourceClient interface {
	// op000001
	RPCCreateAdmin(ctx context.Context, in *CreateOperatorRequest, opts ...grpc.CallOption) (*CreateOperatorResponse, error)
	// op000002
	RPCCreateOperator(ctx context.Context, in *CreateOperatorRequest, opts ...grpc.CallOption) (*CreateOperatorResponse, error)
	// op000003
	RPCVerifyOperator(ctx context.Context, in *VerifyOperatorRequest, opts ...grpc.CallOption) (*VerifyOperatorResponse, error)
	// op000004
	RPCGetOperator(ctx context.Context, in *GetOperatorRequest, opts ...grpc.CallOption) (*GetOperatorResponse, error)
	// op000005
	RPCGetOperatorList(ctx context.Context, in *GetOperatorListRequest, opts ...grpc.CallOption) (*GetOperatorListResponse, error)
	// op000006
	RPCUpdateOperator(ctx context.Context, in *UpdateOperatorRequest, opts ...grpc.CallOption) (*UpdateOperatorResponse, error)
	// op000007
	RPCResendOperatorVerification(ctx context.Context, in *ResendOperatorVerificationRequest, opts ...grpc.CallOption) (*ResendOperatorVerificationResponse, error)
}

type sourceClient struct {
	cc grpc.ClientConnInterface
}

func NewSourceClient(cc grpc.ClientConnInterface) SourceClient {
	return &sourceClient{cc}
}

func (c *sourceClient) RPCCreateAdmin(ctx context.Context, in *CreateOperatorRequest, opts ...grpc.CallOption) (*CreateOperatorResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateOperatorResponse)
	err := c.cc.Invoke(ctx, Source_RPCCreateAdmin_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sourceClient) RPCCreateOperator(ctx context.Context, in *CreateOperatorRequest, opts ...grpc.CallOption) (*CreateOperatorResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateOperatorResponse)
	err := c.cc.Invoke(ctx, Source_RPCCreateOperator_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sourceClient) RPCVerifyOperator(ctx context.Context, in *VerifyOperatorRequest, opts ...grpc.CallOption) (*VerifyOperatorResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(VerifyOperatorResponse)
	err := c.cc.Invoke(ctx, Source_RPCVerifyOperator_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sourceClient) RPCGetOperator(ctx context.Context, in *GetOperatorRequest, opts ...grpc.CallOption) (*GetOperatorResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetOperatorResponse)
	err := c.cc.Invoke(ctx, Source_RPCGetOperator_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sourceClient) RPCGetOperatorList(ctx context.Context, in *GetOperatorListRequest, opts ...grpc.CallOption) (*GetOperatorListResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetOperatorListResponse)
	err := c.cc.Invoke(ctx, Source_RPCGetOperatorList_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sourceClient) RPCUpdateOperator(ctx context.Context, in *UpdateOperatorRequest, opts ...grpc.CallOption) (*UpdateOperatorResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateOperatorResponse)
	err := c.cc.Invoke(ctx, Source_RPCUpdateOperator_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sourceClient) RPCResendOperatorVerification(ctx context.Context, in *ResendOperatorVerificationRequest, opts ...grpc.CallOption) (*ResendOperatorVerificationResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ResendOperatorVerificationResponse)
	err := c.cc.Invoke(ctx, Source_RPCResendOperatorVerification_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SourceServer is the server API for Source service.
// All implementations must embed UnimplementedSourceServer
// for forward compatibility.
type SourceServer interface {
	// op000001
	RPCCreateAdmin(context.Context, *CreateOperatorRequest) (*CreateOperatorResponse, error)
	// op000002
	RPCCreateOperator(context.Context, *CreateOperatorRequest) (*CreateOperatorResponse, error)
	// op000003
	RPCVerifyOperator(context.Context, *VerifyOperatorRequest) (*VerifyOperatorResponse, error)
	// op000004
	RPCGetOperator(context.Context, *GetOperatorRequest) (*GetOperatorResponse, error)
	// op000005
	RPCGetOperatorList(context.Context, *GetOperatorListRequest) (*GetOperatorListResponse, error)
	// op000006
	RPCUpdateOperator(context.Context, *UpdateOperatorRequest) (*UpdateOperatorResponse, error)
	// op000007
	RPCResendOperatorVerification(context.Context, *ResendOperatorVerificationRequest) (*ResendOperatorVerificationResponse, error)
	mustEmbedUnimplementedSourceServer()
}

// UnimplementedSourceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedSourceServer struct{}

func (UnimplementedSourceServer) RPCCreateAdmin(context.Context, *CreateOperatorRequest) (*CreateOperatorResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RPCCreateAdmin not implemented")
}
func (UnimplementedSourceServer) RPCCreateOperator(context.Context, *CreateOperatorRequest) (*CreateOperatorResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RPCCreateOperator not implemented")
}
func (UnimplementedSourceServer) RPCVerifyOperator(context.Context, *VerifyOperatorRequest) (*VerifyOperatorResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RPCVerifyOperator not implemented")
}
func (UnimplementedSourceServer) RPCGetOperator(context.Context, *GetOperatorRequest) (*GetOperatorResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RPCGetOperator not implemented")
}
func (UnimplementedSourceServer) RPCGetOperatorList(context.Context, *GetOperatorListRequest) (*GetOperatorListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RPCGetOperatorList not implemented")
}
func (UnimplementedSourceServer) RPCUpdateOperator(context.Context, *UpdateOperatorRequest) (*UpdateOperatorResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RPCUpdateOperator not implemented")
}
func (UnimplementedSourceServer) RPCResendOperatorVerification(context.Context, *ResendOperatorVerificationRequest) (*ResendOperatorVerificationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RPCResendOperatorVerification not implemented")
}
func (UnimplementedSourceServer) mustEmbedUnimplementedSourceServer() {}
func (UnimplementedSourceServer) testEmbeddedByValue()                {}

// UnsafeSourceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SourceServer will
// result in compilation errors.
type UnsafeSourceServer interface {
	mustEmbedUnimplementedSourceServer()
}

func RegisterSourceServer(s grpc.ServiceRegistrar, srv SourceServer) {
	// If the following call pancis, it indicates UnimplementedSourceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&Source_ServiceDesc, srv)
}

func _Source_RPCCreateAdmin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateOperatorRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SourceServer).RPCCreateAdmin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Source_RPCCreateAdmin_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SourceServer).RPCCreateAdmin(ctx, req.(*CreateOperatorRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Source_RPCCreateOperator_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateOperatorRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SourceServer).RPCCreateOperator(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Source_RPCCreateOperator_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SourceServer).RPCCreateOperator(ctx, req.(*CreateOperatorRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Source_RPCVerifyOperator_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VerifyOperatorRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SourceServer).RPCVerifyOperator(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Source_RPCVerifyOperator_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SourceServer).RPCVerifyOperator(ctx, req.(*VerifyOperatorRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Source_RPCGetOperator_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetOperatorRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SourceServer).RPCGetOperator(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Source_RPCGetOperator_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SourceServer).RPCGetOperator(ctx, req.(*GetOperatorRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Source_RPCGetOperatorList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetOperatorListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SourceServer).RPCGetOperatorList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Source_RPCGetOperatorList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SourceServer).RPCGetOperatorList(ctx, req.(*GetOperatorListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Source_RPCUpdateOperator_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateOperatorRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SourceServer).RPCUpdateOperator(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Source_RPCUpdateOperator_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SourceServer).RPCUpdateOperator(ctx, req.(*UpdateOperatorRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Source_RPCResendOperatorVerification_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResendOperatorVerificationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SourceServer).RPCResendOperatorVerification(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Source_RPCResendOperatorVerification_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SourceServer).RPCResendOperatorVerification(ctx, req.(*ResendOperatorVerificationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Source_ServiceDesc is the grpc.ServiceDesc for Source service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Source_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pb.Source",
	HandlerType: (*SourceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "RPCCreateAdmin",
			Handler:    _Source_RPCCreateAdmin_Handler,
		},
		{
			MethodName: "RPCCreateOperator",
			Handler:    _Source_RPCCreateOperator_Handler,
		},
		{
			MethodName: "RPCVerifyOperator",
			Handler:    _Source_RPCVerifyOperator_Handler,
		},
		{
			MethodName: "RPCGetOperator",
			Handler:    _Source_RPCGetOperator_Handler,
		},
		{
			MethodName: "RPCGetOperatorList",
			Handler:    _Source_RPCGetOperatorList_Handler,
		},
		{
			MethodName: "RPCUpdateOperator",
			Handler:    _Source_RPCUpdateOperator_Handler,
		},
		{
			MethodName: "RPCResendOperatorVerification",
			Handler:    _Source_RPCResendOperatorVerification_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "service.proto",
}
